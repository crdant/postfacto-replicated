---
apiVersion: troubleshoot.sh/v1beta2
kind: SupportBundle
metadata:
  name: postfacto
spec:
  collectors:
  - logs:
      name: postfacto/app/logs
      selector:
        - app.kubernetes.io/name=postfacto
      namespace: '{{repl Namespace }}'
      limits:
        maxAge: 30d
        maxLines: 10000
  - logs:
      name: postfacto/redis/logs
      selector:
        - app.kubernetes.io/name=redis
        - app.kubernetes.io/instance=postfacto
      namespace: '{{repl Namespace }}'
      limits:
        maxAge: 30d
        maxLines: 10000
  - logs:
      name: postfacto/postgres/logs
      selector:
        - app.kubernetes.io/name=postgresql
        - app.kubernetes.io/instance=postfacto
      namespace: '{{repl Namespace }}'
      limits:
        maxAge: 30d
        maxLines: 10000
  - postgres:
      collectorName: postfacto
      uri: 'postgres://{{repl ConfigOption "embedded_postgres_username" }}:{{repl ConfigOption "embedded_postgres_password" }}@postfacto-postgresql'
  - redis:
      collectorName: postfacto
      uri: 'redis://:{{repl ConfigOption "embedded_redis_password"}}@postfacto-redis-master'
  - secret:
      collectorName: existing_postgres_secret
      exclude: repl{{ ConfigOptionNotEquals "postgres_secret_type" "existing_secret" }}
      namespace: '{{repl Namespace}}'
      name: '{{repl ConfigOption "existing_postgres_secret" }}'
      key: password
  - secret:
      collectorName: existing_redis_secret
      exclude: repl{{ ConfigOptionNotEquals "redis_secret_type" "existing_secret" }}
      namespace: '{{repl Namespace}}'
      name: '{{repl ConfigOption "existing_redis_secret" }}'
      key: redis-password
  analyzers:
  - imagePullSecret:
      checkName: Access to index.docker.io
      registryName: index.docker.io
      outcomes:
      - fail:
          message: Could not find index.docker.io imagePullSecret
      - pass:
          message: Found credentials to pull private images from index.docker.io
  - ingress:
      checkName: Access via Ingress
      ingressName: postfacto
      namespace: '{{repl Namespace}}'
      outcomes:
        - fail:
            message: Postfacto ingress is missing or not ready.
        - pass:
            message: Postfacto ingress is ready.
  - deploymentStatus:
      checkName: Application ready
      name: postfacto
      namespace: '{{repl Namespace}}'
      outcomes:
        - fail:
            when: "< 1"
            message: Postfacto application is not ready
        - pass:
            message: Postfacto application is ready
  - statefulsetStatus:
      checkName: Redis available
      name: postfacto-redis-replicas
      namespace: '{{repl Namespace}}'
      outcomes:
        - fail:
            when: "< 1"
            message: No Redis Replicas available
        - warn:
            when: "= 1"
            message: "Degraded: Redis has only a single ready replica."
        - pass:
            message: There are multiple replicas of Redis ready.
  - statefulsetStatus:
      checkName: Postfacto available
      name: postfacto-postgresql
      namespace: '{{repl Namespace}}'
      outcomes:
        - fail:
            when: "< 1"
            message: No Postgres database available
        - pass:
            message: Postgres database is ready
  - postgres:
      checkName: Postgres available
      collectorName: postfacto
      outcomes:
        - fail:
            when: connected == false
            message: Cannot connect to PostgreSQL server
        - pass:
            message: The PostgreSQL server is ready
  - jsonCompare:
      checkName: PostgresAvailable
      fileName: redis/postfacto.json
      path: "isConnected"
      value: "true"
      outcomes:
        - fail:
            when: "false"
            message: Cannot connect to Redis server
        - pass:
            when: "true"
            message: The Redis server is ready
  - jsonCompare:
      checkName: Specified Postgres secret exists
      exclude: repl{{ ConfigOptionNotEquals "postgres_secret_type" "existing_secret" }}
      fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_postgres_secret"}}/password.json'
      path: "secretExists"
      value: true
      outcomes:
        - fail: 
            when: "false"
            message: "Specified Postgres secret does not exist"
        - pass:
            when: "true"
            message: "Specified Posgress secret is available"
  - jsonCompare:
      checkName: Specified Postgres secret has key `password`
      exclude: repl{{ ConfigOptionNotEquals "postgres_secret_type" "existing_secret" }}
      fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_postgres_secret"}}/password.json'
      path: "secretExists"
      value: true
      outcomes:
        - fail: 
            when: "false"
            message: "Specified Postgres secret does not contain the key `password`"
        - pass:
            when: "true"
            message: "Specified Posgress secret contains the required key `password`"
  - jsonCompare:
      checkName: Specified Redis secret exists
      exclude: repl{{ ConfigOptionNotEquals "redis_secret_type" "existing_secret" }}
      fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_redis_secret"}}/password.json'
      path: "secretExists"
      value: true
      outcomes:
        - fail: 
            when: "false"
            message: "Specified Redis secret does not exist"
        - pass:
            when: "true"
            message: "Specified Redis secret is available"
  - jsonCompare:
      checkName: Specified Redis secret has key `redis-password`
      exclude: repl{{ ConfigOptionNotEquals "redis_secret_type" "existing_secret" }}
      fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_redis_secret"}}/redis-password.json'
      path: "secretExists"
      value: true
      outcomes:
        - fail: 
            when: "false"
            message: "Specified Redis secret does not contain the key `redis-password`"
        - pass:
            when: "true"
            message: "Specified Redis secret contains the required key `redis-password`"

