---
apiVersion: troubleshoot.sh/v1beta2
kind: Preflight
metadata:
  name: postfacto
spec:
  collectors:
    - secret:
        collectorName: existing_postgres_secret
        exclude: repl{{ ConfigOptionNotEquals "postgres_secret_type" "existing_secret" }}
        namespace: '{{repl Namespace}}'
        name: '{{repl ConfigOption "existing_postgres_secret" }}'
        key: password
    - secret:
        collectorName: existing_redis_secret
        exclude: repl{{ ConfigOptionNotEquals "redis_secret_type" "existing_secret" }}
        namespace: '{{repl Namespace}}'
        name: '{{repl ConfigOption "existing_redis_secret" }}'
        key: redis-password
  analyzers:
    - clusterVersion:
        outcomes:
          - fail:
              when: "< 1.20.0"
              message: The application requires Kubernetes 1.20.0 or later, and recommends 1.21.0 or later.
              uri: https://www.kubernetes.io
          - warn:
              when: "< 1.21.0"
              message: Your cluster meets the minimum version of Kubernetes, but we recommend you update to 1.21.0 or later.
              uri: https://kubernetes.io
          - pass:
              message: Your cluster meets the recommended and required versions of Kubernetes.
    - containerRuntime:
        outcomes:
          - pass:
              when: "== containerd"
              message: containerd container runtime was found.
          - fail:
              message: Did not find containerd container runtime.
    - distribution:
        checkName: Check Kubernetes environment.
        outcomes:
          - fail:
              when: "== docker-desktop"
              message: The application does not support Docker Desktop Clusters
          - fail:
              when: "== microk8s"
              message: The application does not support Microk8s Clusters
          - fail:
              when: "== minikube"
              message: The application does not support Minikube Clusters
          - pass:
              when: "== eks"
              message: EKS is a supported distribution
          - pass:
              when: "== gke"
              message: GKE is a supported distribution
          - pass:
              when: "== aks"
              message: AKS is a supported distribution
          # Will be supported in the future
          - pass:
              when: "== kurl"
              message: KURL is a supported distribution
          - pass:
              when: "== digitalocean"
              message: DigitalOcean is a supported distribution
          - warn:
              message: Unable to determine the distribution of Kubernetes
    - nodeResources:
        checkName: Total CPU Cores
        outcomes:
          - fail:
              when: "sum(cpuCapacity) < 2"
              message: The cluster must contain at least 2 cores, and should contain at least 4 cores.
          - warn:
              when: "sum(cpuCapacity) < 4"
              message: The cluster should contain at least 4 cores.
          - pass:
              message: There are at least 4 cores in the cluster.
    - jsonCompare:
        checkName: Specified Postgres secret exists
        exclude: repl{{ ConfigOptionNotEquals "postgres_secret_type" "existing_secret" }}
        fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_postgres_secret"}}/password.json'
        path: "secretExists"
        value: true
        outcomes:
          - fail: 
              when: "false"
              message: "Specified Postgres secret does not exist"
          - pass:
              when: "true"
              message: "Specified Posgress secret is available"
    - jsonCompare:
        checkName: Specified Postgres secret has key `password`
        exclude: repl{{ ConfigOptionNotEquals "postgres_secret_type" "existing_secret" }}
        fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_postgres_secret"}}/password.json'
        path: "secretExists"
        value: true
        outcomes:
          - fail: 
              when: "false"
              message: "Specified Postgres secret does not contain the key `password`"
          - pass:
              when: "true"
              message: "Specified Posgress secret contains the required key `password`"
    - jsonCompare:
        checkName: Specified Redis secret exists
        exclude: repl{{ ConfigOptionNotEquals "redips_secret_type" "existing_secret" }}
        fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_redis_secret"}}/password.json'
        path: "secretExists"
        value: true
        outcomes:
          - fail: 
              when: "false"
              message: "Specified Redis secret does not exist"
          - pass:
              when: "true"
              message: "Specified Redis secret is available"
    - jsonCompare:
        checkName: Specified Redis secret has key `redis-password`
        exclude: repl{{ ConfigOptionNotEquals "redis_secret_type" "existing_secret" }}
        fileName: 'secrets/{{repl Namespace}}/{{repl ConfigOption "existing_redis_secret"}}/redis-password.json'
        path: "secretExists"
        value: true
        outcomes:
          - fail: 
              when: "false"
              message: "Specified Redis secret does not contain the key `redis-password`"
          - pass:
              when: "true"
              message: "Specified Redis secret contains the required key `redis-password`"

